generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?   @map("hashed_password")
  allowed        Boolean   @default(false)
  role           UserRole  @default(USER)
  accounts       Account[]
  sessions       Session[]
  posts          Post[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Post {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  excerpt   String
  images    String[] // niz URL-ova slika
  allowed   Boolean  @default(false)
  mainText  String   @db.Text
  comments  Comment[]
  authorId  String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  email     String
  text      String    @db.Text
  postId    String    @db.Uuid
  post      Post      @relation(fields: [postId], references: [id])
  replies   Reply[]   // lista odgovora na komentar
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Reply {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  email      String
  text       String    @db.Text
  commentId  String    @db.Uuid
  comment    Comment   @relation(fields: [commentId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model TournamentApplication {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  teamName    String
  telephone   String
  allowed     Boolean   @default(false)  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}